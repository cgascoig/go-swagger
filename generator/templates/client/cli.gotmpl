// Code generated by go-swagger; DO NOT EDIT.

{{ if .App.Copyright -}}// {{ comment .App.Copyright -}}{{ end }}

package commands
//package {{ .App.Name }}

import (
    "fmt"

    "github.com/spf13/cobra"
    strfmt "github.com/go-openapi/strfmt"
    httptransport "github.com/go-openapi/runtime/client"
    "{{ .App.GenCommon.TargetImportPath }}/{{ .App.Package }}"

    {{ range .App.DefaultImports }}{{ printf "%q" .}}
    {{ end }}
    {{ range $key, $value := .App.Imports }}{{ $key }} {{ printf "%q" $value }}
    {{ end }}

)

{{ define "cliitem" }}
func () *cobra.Command {
    cmd := &cobra.Command{
        Use: "{{ .Token }}",
        {{ if .Operation }}
        Run: func(cmd *cobra.Command, args []string) {
            apiClient := client.New(transport, strfmt.Default)

            params := {{ .Operation.Package }}.New{{ .Operation.Name }}Params()
            {{ if .Parameter }}
            params.{{ pascalize .Parameter }} = args[0]
            {{ end }}

            res, err := apiClient.{{ pascalize .OperationGroup.Name }}.{{ .Operation.Name }}(params)
            resultHandler(res, err)
        }, 
        {{ end }}
        {{ if .Parameter }}
        Args: cobra.ExactArgs(1),
        {{ end }}
    }
    
    {{ range $k, $v := .Children }}
        cmd.AddCommand({{ template "cliitem" $v}}())
    {{ end }}

    return cmd
}{{ end }}

func runCmd(cmd *cobra.Command, args []string) {
    fmt.Printf("Running command %s with args %v", cmd.Use, args)
}

type ResultHandler = func(result interface{}, err error)

func GetCommands(transport *httptransport.Runtime, resultHandler ResultHandler) *cobra.Command {
    rootCmd := {{ template "cliitem" .Cli }}()
    return rootCmd
}